#pragma once
#include "Timer.h"

class CGameFramework
{
private:
	HINSTANCE m_hInstance;
	HWND m_hWnd;

private:
	int m_nWndClientWidth;
	int m_nWndClientHeight;

private:
	IDXGIFactory4 *m_pdxgiFactory;	// DXGI 팩토리 인터페이스에 대한 포인터.
	IDXGISwapChain3 *m_pdxgiSwapChain;	// 스왑 체인 인터페이스에 대한 포인터. 주로 디스플레이를 제어하기 위하여 필요
	ID3D12Device *m_pd3dDevice;	// Direct3D 디바이스 인터페이스에 대한 포인터. 주로 리소스를 생성하기 위하여 필요

private:
	// MSAA 다중 샘플링을 활성화하고 다중 샘플링 레벨을 설정한다.
	bool m_bMsaa4xEnable = false;
	UINT m_nMsaa4xQualityLevels = 0;

private:
	static const UINT m_nSwapChainBuffers = 2;	// 스왑 체인의 후면 버퍼의 개수
	UINT m_nSwapChainBufferIndex;	//현재 스왑체인의 후면버퍼 인덱스

private:
	ID3D12Resource * m_ppd3dRenderTargetBuffers[m_nSwapChainBuffers]; // 렌더 타겟 버퍼
	ID3D12DescriptorHeap *m_pd3dRtvDescriptorHeap;	// 서술자 힙 인터페이스 포인터
	UINT m_nRtvDescriptorIncrementSize;	// 렌더 타겟 서술자 원소의 크기

private:
	ID3D12Resource * m_pd3dDepthStencilBuffer;// 깊이-스텐실 버퍼
	ID3D12DescriptorHeap *m_pd3dDsvDescriptorHeap;// 서술자 힙 인터페이스 포인터
	UINT m_nDsvDescriptorIncrementSize;// 깊이-스탠실 서술자 원소의 크기

private:
	ID3D12CommandQueue *m_pd3dCommandQueue;	// 명령 큐
	ID3D12CommandAllocator *m_pd3dCommandAllocator;	// 명령 할당자
	ID3D12GraphicsCommandList *m_pd3dCommandList;	// 명령 리스트 인터페이스 포인터

private:
	ID3D12PipelineState *m_pd3dPipelineState;	// 그래픽스 파이프라인 상태 객체에 대한 인터페이스 포인터

private:
	ID3D12Fence *m_pd3dFence;	// 펜스 인터페이스 포인터
	UINT64 m_nFenceValue;	// 펜스의 값
	HANDLE m_hFenceEvent;	// 이벤트 핸들

private:
#ifdef _DEBUG
	ID3D12Debug *m_pd3dDebugController;

#endif
	D3D12_VIEWPORT m_d3dViewport;	// 뷰 포트
	D3D12_RECT m_d3dScissorRect;	// 씨저 사각형

private:
	CGameTimer m_GameTimer;	// 프레임워크에서 사용할 타이머이다.
	_TCHAR m_pszFrameRate[50];	// //다음은 프레임 레이트를 주 윈도우의 캡션에 출력하기 위한 문자열이다.

public:
	CGameFramework();
	~CGameFramework();

public:
	bool OnCreate(HINSTANCE hInstance, HWND hMainWnd);	// 프레임워크를 초기화하는 함수이다(주 윈도우가 생성되면 호출된다.)
	void OnDestroy();

public:
	void CreateSwapChain();	// 스왑체인을 생성하는 함수
	void CreateDirect3DDevice();	// 디바이스를 생성하는 함수
	void CreateRtvAndDsvDescriptorHeaps();	// 서술자힙을 생성하는 함수
	void CreateCommandQueueAndList();	// 명령 큐, 할당자, 리스트를 생성하는 함수
	void CreateRenderTargetView();
	void CreateDepthStencilView();

public:
	void BuildObjects();	// 렌더링할 메쉬와 게임 객체를 생성하는 함수
	void ReleaseObjects();	// 렌더링할 메쉬와 게임 객체를 소멸하는 함수

public:
	// 프레임워크의 핵심
	void ProcessInput();	// 사용자 입력을 구성하는 함수
	void AnimateObjects();	// 애니메이션을 구성하는 함수
	void FrameAdvance();	// 렌더링을 구성하는 함수

public:
	void WaitForGpuComplete();	// CPU와 GPU를 동기화 하는 함수

public:
	void OnProcessingMouseMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam);	// 마우스 입력 처리 함수
	void OnProcessingKeyboardMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam);	// 키보드 입력 처리함수
	LRESULT CALLBACK OnProcessingWindowMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam);	// 윈도우의 메시지 처리 함수

};

