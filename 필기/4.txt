게임 프로그래밍이란'



프로그래머가 어떻게 표현할 것인가를 기획하고 이를 알고리즘을 짜고 구현해 가는것



모델 : 3d 물체를 구현하기 위한 데이터들의 집합



게임 프로그래밍에서 반드시 지켜야 하는것



	적절한 프레임 레이트가 유지되어야함(약 60frame/s)



가장 좋은 알고리즘은 없고

	가장 적절한 알고리즘은 존재한다







랜더링 



	T&L (이동, 조명)





매쉬 -> (면의=)다각형의 집합 -> 삼각형의 집합 -> 점의 집합'



	보이면 면 = 전면

	

	안보이는 면 = 은면



		카메라 위치에 따라 달라짐 -> 법선으로 판







2차원 모니터에서의 좌표계



	> x 값 증가



	v y 값 증가



3차원 에서의 기하학 (다렉 12에서)

	

	왼손 좌표계(x축을 엄지 방향이라 할때 검지가 y 중지가 z)





모델의 표현

	

	모델 좌표계



		모델마다 자체적인 별도의 좌표계가 있다고 가정




		그에 따른 상대적인 좌표값을 가진다



	

	월드 좌표계

		

		게임 세상에서 통일된 좌표계



		모든 객체들이 하나의 좌표계로 표현댐



		절대적인 좌표값





	모델과 객체



		모델 = 틀 = class

		

		객체 = 찍어낸것 = 변수







	택스쳐 매핑 

		

		3d 모델에 필요한 데이터를 2d 이미지를 사용해여 매핑하는것



		범프 맵 = 오도토돌한 느김을 구현



		직접 다 계산하면 online 상에서 계산해야 하는 양이 너무 많으믐로



		offline에서 미리 다 계산해준다



	게임 월드의 단위



		게임 월드의 크기와 단위를 결정 해야한다



		실수 표현의 문제(너무 크거나 너무 작으면 값이 오류가 난다)



		모든 객체가 서로 상대적이면서 일관된 크기로 만들어진다면 문제가 없다.

	

	다각형 와인딩 순서



		은면 제거



			보이지 않는 면을 없애는것



		와인딩 순서

			

			다각형의 정점을 나열하는순서



			다이렉트 X 에서는 기본적으로 시계 방향으로 정렬한다



			= 시계 방향이면 정면이고 반시계 방향이면 후면이다





랜더링



	장면 

		게임 월드에 그려야 하는것



	랜더링



		장면을 랜더링 하는것 =  게임 월드에 보이는 모든 것을 그려야 하는것



		화면의 모든 점의 위치를 RT(S는 프레임 레이트를 갉아먹으니) 하면 댐



		변환 파이프 라인



			작업이 순차적으로 수행댐



			3D 모델 좌표를 2D 화면 좌표 (픽셀)로 변환하는 코드(함수)

		

			기본적으로 4개의 구별되는 단계로 구성



				월드 좌표 변환



				카메라 좌표 변환



				투영 변환



				화면 변환















		변환 : 평행 이동



			객체를 평행 이동 시킴



			(x, y, z) + vector(a, b, c) = (x + a, y + b, z + c)



		



		인스터싱



		 	여러 객체가 같은 모양을 가지면?



			하나의 메쉬를 여러 객체에서 공유하는 방법  



				메쉬를 포인터로 불어온다(단 하나의 매쉬 데이터만 있으면 된다!)







		변환 : 회전



			객체를 회전시킴



			평면의 회전 공식을 사용



				사용축의 좌표값은 변하지 않는다



				Xcos(Θ) - Ysin(Θ), Xsin(Θ) + Ysin(Θ)



						*모든 2차원 좌표계의 x,y 값은 rcos(Θ), rsin(Θ)



						로 나타 나질수 있기 때문 , tan(Θ) = sin(Θ)/cos(Θ)



		

			평행 이동과 회전

				

				회전축과 각도가 필요



				프레임 마다 회전 각을 더해 주어야 돌아감



				RT-> 자전 



				TR -> 공전



			

			객체의 표현

			



				보통 상하좌우 대칭으로 가정



				평행이동을 위한 xyz 벡터값





				회전을 위한 xyz 축마다의 회전값







		 	스케일링



				모ㄷㄹ에 있는 모든 정점에 x라는 실수를 곱해서 구함



				대부분의 게임에서는 쓰지 않음



					대신 모델러에게 모델 여러 개를 만들어 달라고함



				프로그램에서 직점 스케일링 하는것 막아야함



					프레임 레이트를 많이 갉아 먹는 요소가 될 수 있기 때문







			온라인과 오프라인 프레임 레이트



				온라인



					게임 타임이 실행하는 도중에 계산하는것



					프레임 레이트에 들어감





				오프라인

					

					프로그램을 빌드하기 이전에 하는것

				프로그램을 만드는 시간

					

					미리 계산 할 수 있는 것은 미리 계산 한다







		카메라 변환





			가상 카메라



			게임 월드를 보기 위한 가상의 카메라가 필요



		일반적으로 카메라는 플레어 캐릭터에 부착되어 있음



		카메라 정보
 


			월드 좌표계에서 카메라의 위치



			카메라의 방향



			카메라의 화각



			카메라 좌표계



			게임 월드를 카메라 중심으로한 상대적은 좌표계로 표현





		카메라의 이동과 회전



			카메라의 움직임과 화면상의 객체의 움직임은 방향이 반대



			카메라를 월드 좌표계의 원점으로 평행이동
			같은 평행이동을 든 객체에 적용

			카메라 좌표계의 축이 월드 좌표계이 축과 일치하도록 카메라를 회전

			같은 회전을 모든 객체에 적용

			객체는 카메라 중심으로 한 좌표계로 표현됨





				카메 좌표를 원점 -> 축을 월드와 동일하게



				TR





		투영 변환



			모든 점을 z의 값으로 xy를 나눠 버린다



			z = 1인 2차원 좌표계로 나타나진다



			원근법 사용한거랑 같다





			화각에 벗어나는점은 보이지 않는다

			

			projected(x,y) = (x/(z/d) , y((z/d))





			투영 평면은 x,y의 abs 값이 1이 되는 지점, d는 이 지점의 z 위치





		화면 좌표



			화면 좌표로의 변환 //ppt 참조